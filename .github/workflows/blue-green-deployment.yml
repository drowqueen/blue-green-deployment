name: Blue-Green Deployment for Mock Game App

on:
  push:
    branches:
      - main

jobs:
  blue-green-deploy:
    runs-on: self-hosted  # Runner hosted on eks-game-demo with SSO role via IRSA
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache .NET packages
      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Build and test C# app
      - name: Build and test
        run: |
          dotnet build ./GameServer.sln --configuration Release
          dotnet test ./GameServer.Tests/GameServer.Tests.csproj --configuration Release --collect:"XPlat Code Coverage" --settings coverlet.runsettings
        env:
          COVERLET_OUTPUT: GameServer.Tests/coverage.opencover.xml

      # Run SonarQube analysis
      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://sonarqube.production.svc.cluster.local:9000
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 6.2.0
          dotnet sonarscanner begin \
            /k:"mock-game-app" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.cs.opencover.reportsPaths="GameServer.Tests/coverage.opencover.xml" \
            /d:sonar.exclusions="**/wwwroot/**,**/migrations/**" \
            /d:sonar.sourceEncoding="UTF-8" \
            || { echo "SonarQube begin failed"; exit 1; }
          dotnet build ./GameServer.sln --configuration Release
          dotnet test ./GameServer.Tests/GameServer.Tests.csproj --configuration Release --collect:"XPlat Code Coverage" --settings coverlet.runsettings
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN" \
            || { echo "SonarQube end failed"; exit 1; }

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Amazon ECR using SSO role
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: us-west-2  # Replace with your EKS region
        # SSO role via IRSA provides credentials

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: <account-id>.dkr.ecr.us-west-2.amazonaws.com/mock-game-app:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Install Helm
      - name: Install Helm
        uses: helm/setup-helm@v4
        with:
          version: '3.14.0'

      # Install kubectl
      - name: Install kubectl
        uses: aws-actions/setup-kubectl@v1
        with:
          version: '1.28.0'

      # Deploy green environment
      - name: Deploy green environment
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          # Securely handle KUBE_CONFIG
          echo "$KUBE_CONFIG" | base64 -d > /tmp/kubeconfig
          helm upgrade --install game-server-green ./charts/game-server \
            --namespace production \
            --set image.tag=${{ github.sha }} \
            --set env=green \
            --kubeconfig /tmp/kubeconfig \
            || { echo "Green deployment failed"; exit 1; }
          rm /tmp/kubeconfig

      # Run distributed K6 load test
      - name: Run K6 distributed load test
        id: k6_test
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > /tmp/kubeconfig
          kubectl apply -f k6/k6-testrun.yaml --kubeconfig /tmp/kubeconfig
          kubectl wait --for=condition=complete testrun/game-server-load-test --namespace production --timeout=1200s --kubeconfig /tmp/kubeconfig \
            || { echo "K6 tests failed"; exit 1; }
          rm /tmp/kubeconfig
        continue-on-error: true # Allow rollback on failure

      # Rollback on test failure
      - name: Rollback green on test failure
        if: steps.k6_test.outcome == 'failure'
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > /tmp/kubeconfig
          helm rollback game-server-green 0 --namespace production --kubeconfig /tmp/kubeconfig \
            || { echo "Rollback failed, manual intervention needed"; exit 1; }
          rm /tmp/kubeconfig
          echo "K6 tests failed. Rolled back green environment."

      # Switch traffic to green via Ingress
      - name: Switch traffic to green
        if: steps.k6_test.outcome == 'success'
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > /tmp/kubeconfig
          kubectl patch ingress game-server-ingress -n production \
            --type='json' \
            -p='[{"op": "replace", "path": "/spec/rules/0/http/paths/0/backend/service/name", "value": "game-server-green"}]' \
            --kubeconfig /tmp/kubeconfig \
            || { echo "Ingress patch failed"; exit 1; }
          rm /tmp/kubeconfig
          echo "Switched traffic to green environment."

      # Clean up old blue environment
      - name: Clean up blue environment
        if: steps.k6_test.outcome == 'success'
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > /tmp/kubeconfig
          sleep 300 # Wait 5 minutes for WebSocket connections to reconnect
          helm uninstall game-server-blue --namespace production --kubeconfig /tmp/kubeconfig \
            || { echo "Blue cleanup failed, manual cleanup may be needed"; exit 1; }
          rm /tmp/kubeconfig
          echo "Cleaned up blue environment."

      # Notify team (e.g., Slack) of deployment status
      - name: Notify deployment status
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'devops-notifications'
          text: |
            Blue-Green Deployment for Mock Game App
            Status: ${{ steps.k6_test.outcome == 'success' && 'Success: Traffic switched to green' || 'Failed: Rolled back green' }}
            Commit: ${{ github.sha }}
            Run: ${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}